#!/bin/sh
# dash git prompt support
#
# Copyright (C) 2006,2007 Shawn O. Pearce <spearce@spearce.org>
# Distributed under the GNU General Public License, version 2.0.
#
# This script allows you to see repository status in your prompt.
#
# To enable:
#
#    1) Add the following line to your .bashrc/.zshrc:
#        source /path/to/git-prompt.sh
#    2) Change your PS1 to call __git_ps1 as command-substitution:
#       Bash: PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
#       ZSH:  setopt PROMPT_SUBST ; PS1='[%n@%m %c$(__git_ps1 " (%s)")]\$ '
#       The optional argument will be used as format string.
#       The %s token is the placeholder for the shown status.
#
# The repository status will be displayed only if you are currently in a
# git repository.
#
# The prompt status always includes the current branch name.
#
# Environment variables:        Git configuration per-repository:
# GIT_PS1_SHOWDIRTYSTATE        bash.showDirtyState
# GIT_PS1_SHOWSTASHSTATE
# GIT_PS1_SHOWUNTRACKEDFILES    bash.showUntrackedFiles
# GIT_PS1_SHOWUPSTREAM          bash.showUpstream
# GIT_PS1_STATESEPARATOR
# GIT_PS1_DESCRIBE_STYLE
# GIT_PS1_SHOWCOLORHINTS
# GIT_PS1_HIDE_IF_PWD_IGNORED   bash.hideIfPwdIgnored
# The git variable defaults to true if the environment variable is enabled.
# Override by setting bash.hideIfPwdIgnored to "false".
#
# Set different environment variable to a nonempty value to enable
# corresponding feature:
# GIT_PS1_SHOWDIRTYSTATE: show unstaged (*) and staged (+) changes.
# GIT_PS1_SHOWSTASHSTATE: show stashed ($).
# GIT_PS1_SHOWUNTRACKEDFILES: show untracked (?) files.
# GIT_PS1_HIDE_IF_PWD_IGNORED: not show in ignored directory.
# GIT_PS1_SHOWCOLORHINTS: coloring the dirty state hint.
#     The colors are based on the colored output of "git status -sb",
#     and are available only when using __git_ps1 for PROMPT_COMMAND.
#
# If you would like to see the difference between HEAD and its upstream,
# set GIT_PS1_SHOWUPSTREAM="auto".  A "<" indicates you are behind, ">"
# indicates you are ahead, "<>" indicates you have diverged and "="
# indicates that there is no difference. You can further control
# behaviour by setting GIT_PS1_SHOWUPSTREAM to a space-separated list
# of values:
#
#     verbose       show number of commits ahead/behind (+/-) upstream
#     name          if verbose, then also show the upstream abbrev name
#
# You can change the separator between the branch name and the above
# state symbols by setting GIT_PS1_STATESEPARATOR. The default separator
# is SP.
#
# If you would like to see more information about the identity of
# commits checked out as a detached HEAD, set GIT_PS1_DESCRIBE_STYLE
# to one of these values:
#
#     contains      relative to newer annotated tag (v1.6.3.2~35)
#     branch        relative to newer tag or branch (master~4)
#     describe      relative to older annotated tag (v1.6.3.1-13-gdd42c2f)
#     tag           relative to any older tag (v1.6.3.1-13-gdd42c2f)
#     default       exactly matching tag
#

# stores the divergence from upstream in $p
# used by GIT_PS1_SHOWUPSTREAM
__git_ps1_show_upstream ()
{
    # parse configuration values
    for option in ${GIT_PS1_SHOWUPSTREAM}; do
        case "$option" in
            verbose) verbose=1 ;;
            name)    name=1 ;;
        esac
    done

    # Find how many commits we are ahead/behind our upstream
    count="$(git rev-list --count --left-right "@{upstream}"...HEAD 2>/dev/null)"

    # calculate the result
    if [ -z "$verbose" ]; then
        case "$count" in
            "")     p="" ;; # no upstream
            "0	0") p="=" ;; # equal to upstream
            "0	"*) p=">" ;; # ahead of upstream
            *"	0") p="<" ;; # behind upstream
            *)      p="<>" ;;# diverged from upstream
        esac
    else
        case "$count" in
            "")     p="" ;; # no upstream
            "0	0") p=" u=" ;; # equal to upstream
            "0	"*) p=" u+${count#0	}" ;; # ahead of upstream
            *"	0") p=" u-${count%	0}" ;; # behind upstream
            *)      p=" u+${count#*	}-${count%	*}" ;; # diverged from upstream
        esac
        if [ -n "$count" ] && [ -n "$name" ]; then
            p="$p $(git rev-parse --abbrev-ref "@{upstream}" 2>/dev/null)"
        fi
    fi
}

# Helper function that is meant to be called from __git_ps1.  It
# injects color codes into the appropriate gitstring variables used
# to build a gitstring.
__git_ps1_colorize_gitstring ()
{
    # Using \[ and \] around colors is necessary to prevent
    # issues with command line editing/browsing/completion!
    c_red='\001\033[31m\002'
    c_green='\001\033[32m\002'
    c_lblue='\001\033[1;34m\002'
    c_clear='\001\033[0m\002'

    bad_color=$c_red
    ok_color=$c_green
    flags_color="$c_lblue"

    branch_color=""
    if [ "$detached" = no ]; then
        branch_color="$ok_color"
    else
        branch_color="$bad_color"
    fi
    c="$branch_color$c"

    z="$c_clear$z"
    [ "$w" = "*" ] && w="$bad_color$w"
    [ -n "$i" ] && i="$ok_color$i"
    [ -n "$s" ] && s="$flags_color$s"
    [ -n "$u" ] && u="$bad_color$u"

    r="$c_clear$r"
}

# Helper function to read the first line of a file into a variable.
# __git_eread requires 2 arguments, the file path and the name of the
# variable, in that order.
__git_eread ()
{
    test -r "$1" && read -r "$2" <"$1"
}

# __git_ps1 accepts 0 or 1 arguments (i.e., format string)
# when called from PS1 using command substitution
# in this mode it prints text to add to bash PS1 prompt (includes branch name)
detached=no

read -r g inside_gitdir bare_repo inside_worktree short_sha <<- EOF
    $(git rev-parse --sq --git-dir --is-inside-git-dir \
    --is-bare-repository --is-inside-work-tree \
    --short HEAD 2>/dev/null | tr '\n' ' ')
EOF

if [ -z "$g" ]; then
    return
fi

if [ "true" = "$inside_worktree" ] &&
   [ -n "${GIT_PS1_HIDE_IF_PWD_IGNORED-}" ] &&
   [ "$(git config --bool bash.hideIfPwdIgnored)" != "false" ] &&
   git check-ignore -q .; then
    return
fi

if [ -d "$g/rebase-merge" ]; then
    __git_eread "$g/rebase-merge/head-name" git_b
    __git_eread "$g/rebase-merge/msgnum" step
    __git_eread "$g/rebase-merge/end" total
    r="|REBASE"
elif [ -d "$g/rebase-apply" ]; then
    __git_eread "$g/rebase-apply/next" step
    __git_eread "$g/rebase-apply/last" total
    if [ -f "$g/rebase-apply/rebasing" ]; then
        __git_eread "$g/rebase-apply/head-name" git_b
        r="|REBASE"
    elif [ -f "$g/rebase-apply/applying" ]; then
        r="|AM"
    else
        r="|AM/REBASE"
    fi
elif [ -f "$g/MERGE_HEAD" ]; then
    r="|MERGING"
# see if a cherry-pick or revert is in progress, if the user has committed a
# conflict resolution with 'git commit' in the middle of a sequence of picks or
# reverts then CHERRY_PICK_HEAD/REVERT_HEAD will not exist so we have to read
# the todo file.
elif test -f "$g/CHERRY_PICK_HEAD"; then
    r="|CHERRY-PICKING"
    return 0;
elif test -f "$g/REVERT_HEAD"; then
    r="|REVERTING"
    return 0;
elif __git_eread "$g/sequencer/todo" todo; then
    case "${todo-}" in
    p[\ \	]|pick[\ \	]*)
        r="|CHERRY-PICKING"
        return 0
        ;;
    revert[\ \	]*)
        r="|REVERTING"
        return 0
        ;;
    esac
elif [ -f "$g/BISECT_LOG" ]; then
    r="|BISECTING"
fi

if [ -n "$git_b" ]; then
    :
elif [ -h "$g/HEAD" ]; then
    # symlink symbolic ref
    git_b="$(git symbolic-ref HEAD 2>/dev/null)"
else
    head=""
    if ! __git_eread "$g/HEAD" head; then
        return
    fi
    # is it a symbolic ref?
    git_b="${head#ref: }"
    if [ "$head" = "$git_b" ]; then
        detached=yes
        git_b="$(
        case "${GIT_PS1_DESCRIBE_STYLE-}" in
        (contains)
            git describe --contains HEAD ;;
        (branch)
            git describe --contains --all HEAD ;;
        (tag)
            git describe --tags HEAD ;;
        (describe)
            git describe HEAD ;;
        (*)
            git describe --tags --exact-match HEAD ;;
        esac 2>/dev/null)" ||

        git_b="$short_sha..."
        git_b="($git_b)"
    fi
fi

if [ -n "$step" ] && [ -n "$total" ]; then
    r="$r $step/$total"
fi

w="" i="" s="" u="" c="" p=""
if [ "true" = "$inside_gitdir" ]; then
    if [ "true" = "$bare_repo" ]; then
        c="BARE:"
    else
        git_b="GIT_DIR!"
    fi
elif [ "true" = "$inside_worktree" ]; then
    if [ -n "${GIT_PS1_SHOWDIRTYSTATE-}" ]; then
        git diff --no-ext-diff --quiet || w="*"
        git diff --no-ext-diff --cached --quiet || i="+"
        if [ -z "$short_sha" ] && [ -z "$i" ]; then
            i="#"
        fi
    fi
    if [ -n "${GIT_PS1_SHOWSTASHSTATE-}" ] &&
       git rev-parse --verify --quiet refs/stash >/dev/null; then
        s="$"
    fi

    if [ -n "${GIT_PS1_SHOWUNTRACKEDFILES-}" ] &&
       git ls-files --others --exclude-standard --directory --no-empty-directory \
       --error-unmatch -- ':/*' >/dev/null 2>/dev/null; then
        u="?"
    fi

    if [ -n "${GIT_PS1_SHOWUPSTREAM-}" ]; then
        __git_ps1_show_upstream
    fi
fi

z="${GIT_PS1_STATESEPARATOR-" "}"

if [ -n "${GIT_PS1_SHOWCOLORHINTS-}" ]; then
    __git_ps1_colorize_gitstring
fi

git_b=${git_b##refs/heads/}

f="$w$i$s$u"
gitstring="$c$git_b${f:+$z$f}$r$p"

printf -- "($gitstring)%s"
