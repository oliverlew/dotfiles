#!/usr/bin/env python
"""
mutt_bootstrap

What it is/does
    Securely, interactively, conveniently start mutt with help of pass.
    Will set imap_user, from, folder, smtp_url, imap_pass and smtp_pass.
    It only sets privacy related options above, not any other options.

    When starting mutt, fzf will popup, letting you choose the email you
    want to log into.

Requirement
    fzf: TUI tool
    pass: Password management tool

Setup
    Save passwords for emails with pass (password store) like this
        $ pass mail/<email-address>

How to use it
    Use 'source "python <this file> |"' in muttrc.
"""
import os
import glob
from subprocess import run, PIPE

# grab all email address from 'mail' subfolder in password store
PASS_DIR_DEFAULT = os.path.join(os.getenv("HOME"), ".passwordstore")
PASS_DIR = os.getenv("PASSWORD_STORE_DIR", PASS_DIR_DEFAULT)
PASS_DIR_MAIL = os.path.join(PASS_DIR, "mail")
mails_gpg = glob.glob(os.path.join(PASS_DIR_MAIL, "*@*.*.gpg"))
mails = [os.path.basename(m).rstrip(".gpg") for m in mails_gpg]

# use fzf to choose one email
input_emails = '\n'.join(sorted(mails)).encode()
res = run(['fzf', '--reverse'], input=input_emails, stdout=PIPE)
if res.returncode != 0:
    exit()

# get basic information
mail = res.stdout.decode().strip()
domain = mail.split('@')[1]

# use pass to retrieve password
res = run(['pass', 'show', f'mail/{mail}'], stdout=PIPE, stderr=PIPE)
if res.returncode == 0:
    password = res.stdout.decode().split('\n')[0]
else:
    password = ''

# dump mutt configurations
print(f'set imap_user = "{mail}"')
print(f'set from = "{mail}"')
print(f'set folder = "imaps://imap.{domain}:993/"')
print(f'set smtp_url= "smtp://{mail}@smtp.{domain}:587/"')
print(f'set imap_pass = {password}')
print(f'set smtp_pass = {password}')
