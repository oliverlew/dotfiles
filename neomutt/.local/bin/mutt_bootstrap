#!/usr/bin/env python
"""
mutt_bootstrap

What it is/does
    Securely, interactively, conveniently start mutt with help of pass.
    Will set imap_user, from, folder, smtp_url, imap_pass and smtp_pass.
    It only sets privacy related options above, not any other options.

    When starting mutt, fzf will popup, letting you choose the email you
    want to log into.

Requirement
    fzf: TUI tool
    pass: Password management tool

Setup
    Save passwords for emails with pass (password store) like this
        $ pass mail/<email-address>
    The imap and smtp server are guessed as:
        imaps://imap.{domain}:993/
        smtp://{mail}@smtp.{domain}:587/

    Additionally, if the imap or smtp server is not trivial, you can
    add these addresses with ports in the password file:
        <password>
        imap=<imap_server>:<imap_port>
        smtp=<smtp_server>:<smtp_port>

How to use it
    Use 'source "python <this file> |"' in muttrc.
"""
import os
import glob
from subprocess import run, PIPE

# grab all email address from 'mail' subfolder in password store
PASS_DIR_DEFAULT = os.path.join(os.getenv("HOME"), ".passwordstore")
PASS_DIR = os.getenv("PASSWORD_STORE_DIR", PASS_DIR_DEFAULT)
PASS_DIR_MAIL = os.path.join(PASS_DIR, "mail")
mails_gpg = glob.glob(os.path.join(PASS_DIR_MAIL, "*@*.*.gpg"))
mails = [os.path.basename(m).rstrip(".gpg") for m in mails_gpg]

# use fzf to choose one email
input_emails = '\n'.join(sorted(mails)).encode()
res = run(['fzf', '--reverse'], input=input_emails, stdout=PIPE)
if res.returncode != 0:
    exit()

# get basic information
mail = res.stdout.decode().strip()
domain = mail.split('@')[1]

# use pass to retrieve password
res = run(['pass', 'show', f'mail/{mail}'], stdout=PIPE, stderr=PIPE)
content = res.stdout.decode().split('\n')
if res.returncode == 0:
    password = content[0]
else:
    password = ''

imap_server = f'imaps://imap.{domain}:993/'
smtp_server = f'smtps://{mail}@smtp.{domain}:465/'
if len(content) > 1:
    for line in content[1:]:
        if '=' in line:
            k, v = line.split('=')
            if k == 'imap':
                if not (v.startswith("imap://") or v.startswith("imaps://")):
                    v = "imaps://" + v
                imap_server = v
            if k == 'smtp':
                if not v.startswith(mail):
                    v = mail + "@" + v
                if not (v.startswith("smtp://") or v.startswith("smtps://")):
                    v = "smtps://" + v
                smtp_server = v

# dump mutt configurations
print(f'set imap_user = "{mail}"')
print(f'set from = "{mail}"')
print(f'set folder = "{imap_server}"')
print(f'set smtp_url = "{smtp_server}"')
print(f'set imap_pass = {password}')
print(f'set smtp_pass = {password}')
