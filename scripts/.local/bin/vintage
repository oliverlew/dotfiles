#!/bin/sh
#
# Licence: MIT
# Author: Lu Xu <oliver_lew@outlook.com>
#
# Script to re-encode video for playback under Windows 3.1 in XingMPEG
# Enjoy the vintage multimedia!
#
# Idea: VCD playback was already well supported in Windows 3.1 era, so
# the script tries to re-encode the video to the codecs close to that
# standard. For details, see `man ffmpeg` for -target option.
#
# Player recommendation:
# XingMPEG was one of the best players to play mpg video or VCDs.
#
# I have considered other codecs, such as Microsoft Video 1 or cinepak
# supported by Video for Windows, but the former is crap quality and the
# latter is terribly slow when using ffmpeg to re-encode.

usage() {
    cat << EOF
$(basename "$0") input_video [output_video]

A script to re-encode video for playback in Windows 3.1 or similar.

Options:
  -t target
    * win31 (default): targetting video playback in Windows 3.1 (with XingMPEG player)
        convert to 352x264 mpeg1video+mp2 in mpg container
    * n900: targetting video playback in Nokia N900 (with Maemo's built-in player)
        convert to 720x480 H264(Baseline@L3)+AAC in mp4 container

Note:
  Output:
    The output video name defaults to '<input_video>.<ext>' (including extension).
    If 'output_video' option is provided, then output to '<output_video>.<ext>'

  Subtitles:
    The script will look for subtitles in the video's internal tracks and
    in the local folder, and prompt you to choose one to burn into the
    output video.
EOF
}

while getopts 'ht:' arg; do
    case "$arg" in
        t) target=$OPTARG ;;
        h|*) usage; exit 1 ;;
    esac
done
shift $((OPTIND - 1))

case "$target" in
    n900) EXT=mp4 WIDTH=800 HEIGHT=480 ;;
    win31|*) EXT=mpg WIDTH=352 HEIGHT=264 ;;
esac

if [ $# = 2 ]; then
    orig=$1
    dest=${2%."$EXT"}.$EXT
elif [ $# = 1 ]; then
    orig=$1
    dest=$orig.$EXT
else
    usage
fi

# Burn subtitles, try external srt or ass subtitle, fallback to internal subtitles
if [ -f "${1%.*}.srt" ]; then
    vf_subtitles="subtitles=${1%.*}.srt"
    echo "Burning subtitle file ${1%.*}.srt into the video"
elif [ -f "${1%.*}.ass" ]; then
    vf_subtitles="ass=${1%.*}.ass:original_size="
    echo "Burning subtitle file ${1%.*}.ass into the video"
else
    # Find first subtitle
    first_sub=$(ffprobe "$orig" -v error \
        -select_streams s:0 \
        -show_entries stream=index \
        -of csv=nk=1:p=0)
    if [ -n "$first_sub" ]; then
        # List all subtitles
        echo Subtitles in the video:
        ffprobe -v error \
            -select_streams s \
            -show_entries "stream=index,codec_long_name:stream_tags=language,title" \
            -of csv=nk=0:p=0 -i "$orig" |
        sed -e "s/index=\([0-9]\+\)/Subtitle \1/" \
            -e "s/codec_long_name=/ /" \
            -e "s/tag:language=\([^,]\+\)/ [\1]/" \
            -e "s/tag:title=/ /" |
        awk -v "start=$first_sub" '{
            printf "- %s %d,", $1, $2 - start;
            for (i = 3; i <= NF; i ++) {
                printf " %s", $i
            };
            printf "\n"
        }'
        printf "Enter the subtitle index you want to burn into the video.\n"
        printf "Must be a single integer. E.g. 0 or 1. Enter without input to skip: "
        read -r index
        if [ -n "$index" ]; then
            echo "Using subtitle No. $index"
            vf_subtitles="subtitles=$orig:si=$index"
        else
            echo "Not burning any subtitles"
        fi
    fi
fi

# HACKY way to add black bars to top/bottom or left/right to keep aspect ratio
vf_scale="scale=min($WIDTH\,$HEIGHT*iw/ih):min($HEIGHT\,$WIDTH*ih/iw)"
vf_pad="pad=$WIDTH:$HEIGHT:max(0\,(ow-iw)/2):max(0\,(oh-ih)/2)"
video_filter=$vf_scale${vf_pad+,$vf_pad}${vf_subtitles+,$vf_subtitles}

case "$target" in
    n900)
        # baseline profile required
        # default crf (23) and preset (medium) are good enough
        ffmpeg  -i "$orig" -y \
            -v error -stats \
            -f mp4 \
            -c:v libx264 \
            -profile:v baseline \
            -r 30 \
            -vf "$video_filter" \
            -c:a aac \
            -ac 2 \
            "$dest" && \
        echo "Generated video: $dest"
        ;;
    win31|*)
        # Similar to -target ntsc-vcd, but with some changes
        # Video:
        # frame rate being 25
        # better video quality (0 is good)
        # The -bufsize and -maxrate is to fix some playback issue with XingMPEG,
        # apparently default values breaks something.
        # Audio:
        # common sample rate, multiplies of 11025 Hz
        # stereo, 2 channels
        # control the audio bitrate, default was 384k
        ffmpeg -i "$orig" -y \
            -v error -stats \
            -f vcd \
            -c:v mpeg1video \
            -bufsize 327680 \
            -maxrate:v 1150k \
            -r 25 \
            -q:v 0 \
            -vf "$video_filter" \
            -c:a mp2 \
            -ar 44100 \
            -ac 2 \
            -b:a 224k \
            "$dest" && \
        echo "Generated video: $dest"
        ;;
esac
