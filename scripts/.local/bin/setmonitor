#!/bin/sh
# A script to configure multiple displays with xrandr

# Don't run if another $0 is already running
[ "$(pgrep -cx "${0##*/}")" -gt 1 ] && exit

while getopts q arg; do
    case "$arg" in
        q) flag_quiet=1 ;;
        *) ;;
    esac
done
shift $((OPTIND - 1))

command -v dmenu > /dev/null && DMENU="dmenu" || DMENU="rofi -dmenu"

all_monitors=$(xrandr | sed -n 's/\(.*\) \(dis\|\)connected.*/\1/p')
monitors=$(xrandr | sed -n 's/\(.*\) connected.*/\1/p')

# This is the core part. Without lists/arrys in POSIX shell, we store the
# commands beforehand in different variables corresponding to each option.
# In other words, if we choose the Nth option, the command "$command_N" will
# be executed
add_cmd() {
    options="$options${index:-0} $1\n"
    eval "command_${index:-0}=\"$2\""
    index=$((index + 1))
}

# Disable any other monitors that's *not* in the function arguments
xrandr_disable_others() {
    for m in $all_monitors; do
        for n in "$@"; do [ "$m" = "$n" ] && enabled="$m"; done
        [ "$m" != "$enabled" ] && printf " --output %s --off" "$m"
    done
}

# Single Monitor
for m in $monitors; do
    add_cmd "Single    $m" \
            "xrandr --output $m --auto --primary $(xrandr_disable_others "$m")"
done

# Dual monitor
for m in $monitors; do
    for n in $monitors; do
        [ "$m" = "$n" ] && continue
        add_cmd "Dual      $m -> $n" "xrandr --output $m --auto --primary
            --output $n --auto --right-of $m $(xrandr_disable_others "$m" "$n")"
        add_cmd "Mirror    $m -> $n" "xrandr --output $m --auto --primary
            --output $n --auto --same-as $m $(xrandr_disable_others "$m" "$n")"
    done
done

# if [ "$index" = 1 ] && [ -n "$flag_quiet" ]; then
#     eval '$command_0'
#     exit
# fi

choice=$(printf "%s$options" | $DMENU -i -l 10 -p "Set monitors:" | cut -d " " -f 1)

eval "\$command_${choice}"
