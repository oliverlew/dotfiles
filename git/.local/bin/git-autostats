#!/bin/sh

usage()
{
    echo "Usage: $(basename "$0") [ -q ] [ -s ]"
    echo "    -q: don't print repo informations"
    echo "    -s: search and update repos in the path"
}

search_repos()
{
    printf "Enter the username to filter repo owners (accept basic regex): "
    read -r user
    locate "$HOME/*.git" |
    grep -v "$HOME/\.\(cache\|config\|vim\)/.*" |
    xargs dirname |
    while read -r repo; do
        git -C "$repo" remote show -n |
        while read -r remote; do
            git -C "$repo" remote get-url "$remote" |
            grep -iq "${user:-.}" &&
            echo "$repo"
        done
    done | sort -u > "$CONFIG_FILE"
}

CONFIG_FILE="$HOME/.config/git-autofetch"

while getopts "hqs" p; do
    case "$p" in
        q) flag_quiet=1;;
        s) search_repos; exit;;
        h|*) usage; exit;;
    esac
done

if [ -f "$CONFIG_FILE" ]; then
    echo " ahead behind staged unstaged untracked repo path"

    while read -r p; do
        [ ! -d "$p" ] && continue
        count=$(git -C "$p" rev-list --count --left-right HEAD..."@{upstream}")
        staged=$(git -C "$p" diff --cached --numstat | wc -l)
        unstaged=$(git -C "$p" diff --numstat | wc -l)
        untracked=$(git -C "$p" ls-files --other --exclude-standard | wc -l)

        # update cached result
        case "$count" in
            "") ;;
            "0	0") uptodate=$((uptodate + 1)) ;;
            "0	"*) behind=$((behind + 1)) ;;
            *"	0") ahead=$((ahead + 1)) ;;
            *) conflict=$((conflict + 1)) ;;
        esac
        [ "$staged" != 0 ] && staged_count=$((staged_count + 1))
        [ "$unstaged" != 0 ] && unstaged_count=$((unstaged_count + 1))
        [ "$untracked" != 0 ] && untracked_count=$((untracked_count + 1))

        # print repo informations
        left=${count%	*}
        right=${count#*	}
        if [ "$flag_quiet" != 1 ]; then
            printf "\033[$((left?34:0))m%6s\033[0m " "+$left"
            printf "\033[$((right?31:0))m%6s\033[0m " "-$right"
            printf "\033[$((staged?34:0))m%6s\033[0m " "$staged"
            printf "\033[$((unstaged?31:0))m%8s\033[0m " "$unstaged"
            printf "\033[$((untracked?31:0))m%9s\033[0m " "$untracked"
            printf "%s\n" "~${p#$HOME}"
        fi
    done < "$CONFIG_FILE"

    echo "${uptodate:-0} ${ahead:-0} ${behind:-0} ${conflict:-0} ${staged_count:-0} ${unstaged_count:-0} ${untracked_count:-0}" > /tmp/git-autostats
else
    echo "Create $CONFIG_FILE with repos you want to auto-fetch/track one in each line"
    echo "You can use \"$(basename "$0") -s\" to do it more easily"
    exit
fi
