## This config is used in the fbtmux script, better to use in fbterm (with support for more fonts)

# As in the fbtmux script, I recommand start a tmux session with a
# special session name, e.g. fbtmux, and a special socket name, e.g. fbtmux
# so that only this session uses the config and the normal sessions remain
# unaffected.
# e.g.
# tmux -L fbtmux -f .fbtmux.conf new -A -s fbtmux

# The configs in this file is trying to make tmux behave more like a WM by
# - using root keybindings,
# - emulating a "tiled" layout and
# The keybindings are intended to be similar to AwesomeWM/dwm

## Source the common configs
MAIN_CONF="$HOME/.config/tmux/tmux.conf"
FBTMUX_CONF="$HOME/.config/tmux/fbtmux.conf"
source $MAIN_CONF
bind r source-file $FBTMUX_CONF
bind C-a send-prefix
# unbind root keybindings, usually mouse events
unbind-key -T root -a

# Move pane to prev/next window
bind -N "Move the pane to previous window" -n M-< if "test '#{window_panes}' -eq 1" { split-window -d } \; move-pane -t :-
bind -N "Move the pane to next window"     -n M-> if "test '#{window_panes}' -eq 1" { split-window -d } \; move-pane -t :+
# Move pane to a window
bind -N "Move the pane to window 1" -n M-'!' if "test '#I' != 1 -a '#{window_panes}' -eq 1" { split-window -d } \; move-pane -t :1
bind -N "Move the pane to window 2" -n M-'@' if "test '#I' != 2 -a '#{window_panes}' -eq 1" { split-window -d } \; move-pane -t :2
bind -N "Move the pane to window 3" -n M-'#' if "test '#I' != 3 -a '#{window_panes}' -eq 1" { split-window -d } \; move-pane -t :3
bind -N "Move the pane to window 4" -n M-'$' if "test '#I' != 4 -a '#{window_panes}' -eq 1" { split-window -d } \; move-pane -t :4
bind -N "Move the pane to window 5" -n M-'%' if "test '#I' != 5 -a '#{window_panes}' -eq 1" { split-window -d } \; move-pane -t :5
bind -N "Move the pane to window 6" -n M-'^' if "test '#I' != 6 -a '#{window_panes}' -eq 1" { split-window -d } \; move-pane -t :6
bind -N "Move the pane to window 7" -n M-'&' if "test '#I' != 7 -a '#{window_panes}' -eq 1" { split-window -d } \; move-pane -t :7
bind -N "Move the pane to window 8" -n M-'*' if "test '#I' != 8 -a '#{window_panes}' -eq 1" { split-window -d } \; move-pane -t :8
bind -N "Move the pane to window 9" -n M-'(' if "test '#I' != 9 -a '#{window_panes}' -eq 1" { split-window -d } \; move-pane -t :9

## Lock screen ( more like screensaver ), see lock-command
bind -N "Open screen saver" -n M-C-l lock-session
set -g lock-after-time 600
# Set tty-clock as screensaver, make it fullscreen, exit upon any keypress
# set -g lock-command { tmux set status off; tmux resize-pane -Z; tty-clock -csSa 100000000 -d 0; tmux set status on; tmux resize-pane -Z }

## Multimedia
# Change brightness
bind -N "Turn down brightness" -n M-- run-shell "statusc light down"\; refresh-client -S
bind -N "Turn up brightness"   -n M-= run-shell "statusc light up"\; refresh-client -S
# Change volume
bind -N "Turn down volume" -n M-[ run-shell "statusc vol down"\; refresh-client -S
bind -N "Turn up volume"   -n M-] run-shell "statusc vol up"\; refresh-client -S
bind -N "Toggle volume"    -n M-\\ run-shell "statusc vol toggle"\; refresh-client -S
# mpd operations, 5 keybinds above + Shift
bind -N "Mpd: seek backward 10s" -n M-_ run-shell "mpc -q seek -10"
bind -N "Mpd: seek forward 10s"  -n M-+ run-shell "mpc -q seek +10"
bind -N "Mpd: presious song"     -n M-\{ run-shell "mpc -q prev"
bind -N "Mpd: next song"         -n M-\} run-shell "mpc -q next"
bind -N "Mpd: toggle pause/play" -n M-| run-shell "mpc -q toggle"

# copy and paste
bind -T copy-mode-vi Space send-keys -X page-down
bind -T copy-mode-vi BSpace send-keys -X page-up
bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# Screenshot
bind -N "Take screenshot" -n M-p run -b "fbgrab ~/Pictures/FrameBuffer_$(date +%F_%H-%M-%S).png"

# vim: ft=tmux
